module.exports=function(grunt){function getReferencedSources(sourceReferencesFilename){var result;return global.knockoutDebugCallback=function(e){result=e},eval(grunt.file.read(sourceReferencesFilename)),result}function getCombinedSources(){var e=grunt.config("fragments"),t=[e+"extern-pre.js",e+"amd-pre.js",getReferencedSources(e+"source-references.js"),e+"amd-post.js",e+"extern-post.js"],n=Array.prototype.concat.apply([],t),r=n.map(function(e){return grunt.file.read("./"+e)}).join("");return r.replace("##VERSION##",grunt.config("pkg.version"))}function buildDebug(e){var t=[];t.push(grunt.config("banner")),t.push("(function(){\n"),t.push("var DEBUG=true;\n"),t.push(getCombinedSources()),t.push("})();\n"),grunt.file.write(e,t.join("").replace(/\r\n/g,"\n"))}function buildMin(e,t){var n=require("closure-compiler"),r={compilation_level:"ADVANCED_OPTIMIZATIONS",output_wrapper:"(function() {%output%})();"};grunt.log.write("Compiling..."),n.compile("/**@const*/var DEBUG=false;"+getCombinedSources(),r,function(n,r,i){n?(grunt.log.error(n),t(!1)):(grunt.log.ok(),grunt.file.write(e,(grunt.config("banner")+r).replace(/\r\n/g,"\n")),t(!0))})}var _=grunt.util._;grunt.initConfig({pkg:grunt.file.readJSON("package.json"),fragments:"./build/fragments/",banner:"/*!\n * Knockout JavaScript library v<%= pkg.version %>\n * (c) Steven Sanderson - <%= pkg.homepage %>\n * License: <%= pkg.licenses[0].type %> (<%= pkg.licenses[0].url %>)\n */\n\n",checktrailingspaces:{main:{src:["**/*.{js,html,css,bat,ps1,sh}","!build/output/**","!node_modules/**"],filter:"isFile"}},build:{debug:"./build/output/knockout-latest.debug.js",min:"./build/output/knockout-latest.js"},dist:{debug:"./dist/knockout.debug.js",min:"./dist/knockout.js"},test:{phantomjs:"spec/runner.phantom.js",node:"spec/runner.node.js"}}),grunt.registerTask("clean","Clean up output files.",function(e){var t=grunt.config("build"),n=[t.debug,t.min],r={force:e=="force"};return _.forEach(n,function(e){grunt.file.exists(e)&&grunt.file.delete(e,r)}),!this.errorCount});var trailingSpaceRegex=/[ ]$/;grunt.registerMultiTask("checktrailingspaces","checktrailingspaces",function(){var e=[];this.files[0].src.forEach(function(t){var n=grunt.file.read(t),r=n.split(/\r*\n/);r.forEach(function(n,r){trailingSpaceRegex.test(n)&&e.push([t,r+1,n].join(":"))})});if(e.length)return grunt.log.error("The following files have trailing spaces that need to be cleaned up:"),grunt.log.writeln(e.join("\n")),!1}),grunt.registerMultiTask("build","Build",function(){if(!this.errorCount){var e=this.data;this.target==="debug"?buildDebug(e):this.target==="min"&&buildMin(e,this.async())}return!this.errorCount}),grunt.registerMultiTask("test","Run tests",function(){var e=this.async();grunt.util.spawn({cmd:this.target,args:[this.data]},function(t,n,r){r===127?(grunt.verbose.error(n.stderr),e(!0)):(grunt.log.writeln(n.stdout),t&&grunt.log.error(n.stderr),e(!t))})}),grunt.registerTask("dist",function(){var e=grunt.file.readJSON("bower.json"),t=grunt.config("pkg.version");e.version=t,grunt.file.write("bower.json",JSON.stringify(e,!0,2));var n=grunt.config("build"),r=grunt.config("dist");grunt.file.copy(n.debug,r.debug),grunt.file.copy(n.min,r.min),console.log("To publish, run:"),console.log("    git add bower.json"),console.log("    git add -f "+r.debug),console.log("    git add -f "+r.min),console.log("    git checkout head"),console.log("    git commit -m 'Version "+t+" for distribution'"),console.log("    git tag -a v"+t+" -m 'Add tag v"+t+"'"),console.log("    git checkout master"),console.log("    git push origin --tags")}),grunt.registerTask("default",["clean","checktrailingspaces","build","test"])};