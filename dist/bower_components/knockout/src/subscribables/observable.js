ko.observable=function(e){function n(){return arguments.length>0?(n.isDifferent(t,arguments[0])&&(n.valueWillMutate(),t=arguments[0],DEBUG&&(n._latestValue=t),n.valueHasMutated()),this):(ko.dependencyDetection.registerDependency(n),t)}var t=e;return ko.subscribable.call(n),ko.utils.setPrototypeOfOrExtend(n,ko.observable.fn),DEBUG&&(n._latestValue=t),n.peek=function(){return t},n.valueHasMutated=function(){n.notifySubscribers(t)},n.valueWillMutate=function(){n.notifySubscribers(t,"beforeChange")},ko.exportProperty(n,"peek",n.peek),ko.exportProperty(n,"valueHasMutated",n.valueHasMutated),ko.exportProperty(n,"valueWillMutate",n.valueWillMutate),n},ko.observable.fn={equalityComparer:valuesArePrimitiveAndEqual};var protoProperty=ko.observable.protoProperty="__ko_proto__";ko.observable.fn[protoProperty]=ko.observable,ko.utils.canSetPrototype&&ko.utils.setPrototypeOf(ko.observable.fn,ko.subscribable.fn),ko.hasPrototype=function(e,t){return e===null||e===undefined||e[protoProperty]===undefined?!1:e[protoProperty]===t?!0:ko.hasPrototype(e[protoProperty],t)},ko.isObservable=function(e){return ko.hasPrototype(e,ko.observable)},ko.isWriteableObservable=function(e){return typeof e=="function"&&e[protoProperty]===ko.observable?!0:typeof e=="function"&&e[protoProperty]===ko.dependentObservable&&e.hasWriteFunction?!0:!1},ko.exportSymbol("observable",ko.observable),ko.exportSymbol("isObservable",ko.isObservable),ko.exportSymbol("isWriteableObservable",ko.isWriteableObservable),ko.exportSymbol("isWritableObservable",ko.isWriteableObservable);